// Generated by CoffeeScript 1.6.3
(function() {
  var $, findFile, fsError, openFile, openFileSystem, openFileWriter;

  $ = jQuery;

  fsError = function(e) {
    var key, value;
    if (typeof e.code !== 'number') {
      return "Invalid fileSystem error object";
    }
    for (key in e) {
      value = e[key];
      if (e.code === value && /_ERR$/.test(key)) {
        return key;
      }
    }
    return "Unknown fileSystem error code: " + e.code;
  };

  openFileSystem = (function() {
    var $fs;
    $fs = null;
    return function() {
      var defer, error, success,
        _this = this;
      defer = $.Deferred();
      if ($fs !== null) {
        return defer.resolve($fs);
      }
      success = function(fs) {
        $fs = fs;
        defer.resolve(fs);
      };
      error = function(e) {
        defer.reject("Cannot access filesystem: " + (fsError(e)), e);
      };
      webkitRequestFileSystem(PERSISTENT, 100 * 1024 * 1024, success, error);
      return defer;
    };
  })();

  findFile = function(name, opts) {
    return openFileSystem().then(function(fs) {
      var defer, error, success;
      defer = $.Deferred();
      success = function(fe) {
        defer.resolve(fe);
      };
      error = function(e) {
        defer.reject("Cannot find " + name + ": " + (fsError(e)), e);
      };
      fs.root.getFile(name, opts, success, error);
      return defer;
    });
  };

  this.removeFile = function(name) {
    return findFile(name, {
      create: false
    }).then(function(fe) {
      var defer, error, success;
      defer = $.Deferred();
      success = function() {
        defer.resolve();
      };
      error = function(e) {
        defer.reject("Cannot remove " + name + ": " + (fsError(e)), e);
      };
      fe.remove(success, error);
      return defer;
    });
  };

  openFile = function(name, opts) {
    return findFile(name, opts).then(function(fe) {
      var defer, error, success;
      defer = $.Deferred();
      success = function(fh) {
        defer.resolve(fh);
      };
      error = function(e) {
        defer.reject("Cannot open " + name + ": " + (fsError(e)), e);
      };
      fe.file(success, error);
      return defer;
    });
  };

  openFileWriter = function(name, opts) {
    return findFile(name, opts).then(function(fe) {
      var defer, error, success;
      defer = $.Deferred();
      success = function(fw) {
        defer.resolve(fw);
      };
      error = function(e) {
        defer.reject("Cannot open " + name + " for writing: " + (fsError(e)), e);
      };
      fe.createWriter(success, error);
      return defer;
    });
  };

  this.readFileHandle = function(fh) {
    var defer, reader;
    defer = $.Deferred();
    reader = new FileReader();
    reader.onloadend = function() {
      defer.resolve(reader.result);
    };
    reader.onerror = function(e) {
      defer.reject("Cannot read " + fh.name + ": " + (fsError(e)), e);
    };
    reader.readAsText(fh);
    return defer;
  };

  this.readFile = function(name, opts) {
    if (opts == null) {
      opts = {
        create: false
      };
    }
    return openFile(name, opts).then(function(fh) {
      return readFileHandle(fh);
    });
  };

  this.writeFile = function(name, data, opts) {
    if (opts == null) {
      opts = {
        create: true
      };
    }
    return openFileWriter(name, opts).then(function(fw) {
      var blob, defer;
      defer = $.Deferred();
      fw.onwriteend = function() {
        defer.resolve(data);
      };
      fw.onerror = function(e) {
        defer.reject("Cannot write " + name + ": " + (fsError(e)), e);
      };
      blob = new Blob([data], {
        type: 'text/plain'
      });
      fw.write(blob);
      return defer;
    });
  };

}).call(this);
