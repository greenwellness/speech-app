// Generated by CoffeeScript 1.6.3
(function() {
  var $, FontsPage, LanguagesSelectionPage, Page, PrettifyRulesPage, SingleTextboxPage, SnippetsPage, TextAutoSaver, ValueAutoSaver, addTranscription, alert, attachEventHandlers, bug, changeStatus, currentPage, doing, emptyStringRe, escapeHTML, i18n, listening, prettifier, prettifyText, reLayoutPage, recognition, setTextFont, startRecognizer, switchToPage, textCommand, toggleHelp, toggleListening, __locale,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  recognition = null;

  listening = false;

  currentPage = 'main';

  prettifier = null;

  emptyStringRe = /^\s*$/;

  window.t = function(id, vars) {
    if (vars == null) {
      vars = {};
    }
    return (i18n[__locale][id] || i18n.en[id] || ("(?) " + id)).replace(/\{(\w+)\}/g, function(a, k) {
      return vars[k] || ("?" + k);
    });
  };

  i18n = {
    nl: {
      'Hello, {world}': '{world} hallo!',
      "Program error! Please report to developer! Error: {html}\n\nYou may try to continue by pressing OK.": "Programma fout! Aub melden aan ontwikkelaar. Fout: {html}\n\n\Je kunt proberen verder te gaan door op OK te drukken.",
      "Cannot change font: {e}": "Kan lettertype niet wijzigen: {e}",
      "Stopping": "Aan het stoppen",
      "Starting": "Aan het starten",
      "Speech recognition error: {event.error}": "Spraakherkenning fout: {event.error}",
      "# The first word is the language code, used by the speech recognition engine.": "# Het eerste woord is de taalcode die door de spraakherkenning gebruikt wordt.",
      "# The rest of the line is just a label for the language selection box.": "# De rest van de regel is slechts een label voor het keuzemenu.",
      "At least one language must be specified.": "Tenminste één taal moet geselecteerd zijn.",
      "Invalid line:\n {line}": "Ongeldige regel:\n {line}"
    }
  };

  __locale = 'nl';

  escapeHTML = function(text) {
    return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };

  alert = null;

  $(function() {
    var template;
    template = $('div.alert');
    return alert = function(html) {
      var page;
      page = template.clone().insertBefore(template).show();
      $('.message', page).html(html.replace("\n", "<br>"));
      return $('.ok', page).on('click', function(event) {
        page.fadeOut(function() {
          return page.remove();
        });
      });
    };
  });

  bug = function(html) {
    alert(t("Program error! Please report to developer!\nError: {html}\n\nYou may try to continue by pressing OK.", {
      html: html
    }));
    return $.Deferred.reject(escapeHTML(html));
  };

  doing = null;

  $(function() {
    var template;
    template = $('div.doing');
    doing = function(message, defer) {
      var page;
      page = template.clone().insertBefore(template).show();
      $('.message', page).text(message);
      defer.always(function() {
        page.remove();
      });
      return defer.fail(function(message) {
        alert(escapeHTML(message));
      });
    };
  });

  changeStatus = function(message, clickable) {
    if (clickable == null) {
      clickable = false;
    }
    $('#start').text(message).prop('disabled', !clickable);
  };

  addTranscription = (function() {
    var endWithSpace, startWithSpace;
    endWithSpace = new RegExp('(^|\n| )$');
    startWithSpace = new RegExp('^( |\n|$)');
    return function(text) {
      var afterText, beforeText, elem, endPosition, input, newPosition, newText, oldText, startPosition;
      input = $('#text');
      elem = input[0];
      startPosition = elem.selectionStart;
      endPosition = elem.selectionEnd;
      oldText = input.val();
      beforeText = oldText.substr(0, startPosition);
      afterText = oldText.substr(endPosition);
      text = text.replace(/^ +| +$/, '');
      if (!endWithSpace.test(beforeText)) {
        text = " " + text;
      }
      if (!startWithSpace.test(afterText)) {
        text = text + " ";
      }
      newText = beforeText + text + afterText;
      input.val(newText).triggerHandler('change');
      newPosition = startPosition + text.length;
      elem.setSelectionRange(newPosition, newPosition);
    };
  })();

  setTextFont = function(font) {
    var e, family, size, _ref;
    if (typeof font !== 'string' || font === '') {
      return;
    }
    try {
      _ref = font.split(/,\s+/), family = _ref[0], size = _ref[1];
      $('#text').css({
        'font-family': family || 'Arial',
        'font-size': Number(size || 14)
      });
    } catch (_error) {
      e = _error;
      alert(t("Cannot change font: {e}"));
    }
  };

  $(function() {
    if (startRecognizer() === false) {
      return;
    }
    new TextAutoSaver('text', $('#text'));
    new LanguagesSelectionPage();
    prettifier = new PrettifyRulesPage();
    new SnippetsPage();
    new FontsPage();
    attachEventHandlers();
    changeStatus("Start", true);
    $('#header .edit').fadeTo('slow', 0.5);
    $('#main-page').layoutPage();
  });

  $(function() {
    var button, list;
    button = $('#menu-button');
    list = $('#menu-list');
    button.on('click', function(event) {
      list.slideDown('fast');
    });
    list.on('mouseleave', function(event) {
      list.hide();
    });
    $('#menu-quit').on('click', function(event) {
      window.close();
    });
  });

  $.fn.sumHeights = function() {
    var elem, height, _i, _len;
    height = 0;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      elem = this[_i];
      height += $(elem).outerHeight(true);
    }
    return height;
  };

  $.fn.layoutPage = function() {
    return this.each(function() {
      var $this, nextHeights, prevHeights, textarea;
      $this = $(this);
      textarea = $this.children('textarea');
      if (textarea.length === 1) {
        prevHeights = textarea.prevAll('.layout:visible').sumHeights() + $('#titlebar').outerHeight(true);
        nextHeights = textarea.nextAll('.layout:visible').sumHeights();
        textarea.height(document.documentElement.clientHeight - prevHeights - nextHeights - 21 + 1);
        return textarea.width($(window).width() - 18);
      }
    });
  };

  $(function() {
    return window.onresize = function(event) {
      $('#' + currentPage + '-page').layoutPage();
    };
  });

  switchToPage = function(name) {
    currentPage = name;
    document.body.scrollTop = 0;
    $('body [id$=-page]:visible').hide();
    return $('#' + name + '-page').fadeIn().layoutPage();
  };

  reLayoutPage = function() {
    $('#' + currentPage + '-page').layoutPage();
  };

  prettifyText = function() {
    var input;
    input = $('#text');
    return doing("Prettifying", prettifier.magic(input.val()).done(function(text) {
      input.val(text);
      input[0].setSelectionRange(0, input.val().length);
      input.focus();
    }));
  };

  textCommand = function(command) {
    prettifyText().done(function() {
      document.execCommand(command);
    });
    if (listening) {
      toggleListening();
    }
  };

  toggleHelp = null;

  $(function() {
    var help;
    help = $('#help');
    return toggleHelp = function() {
      help.children().toggle();
      reLayoutPage();
    };
  });

  attachEventHandlers = function() {
    $('body').on('keydown', function(event) {
      var _ref;
      if (currentPage === 'main') {
        if ((_ref = event.which) === 27) {
          toggleListening();
        }
        if ((event.which === 72 && event.ctrlKey === true) || event.which === 112) {
          toggleHelp();
        }
        if (event.which === 67 && event.ctrlKey === true) {
          event.preventDefault();
          textCommand('copy');
        }
        if (event.which === 88 && event.ctrlKey === true) {
          event.preventDefault();
          textCommand('cut');
        }
      }
    });
    (function(button) {
      button.on('click', function(event) {
        toggleListening();
      });
    })($("#start"));
    (function(input) {
      input.on('select', function(event) {
        document.execCommand('copy');
      });
      $('#prettify').on('click', function(event) {
        prettifyText();
      });
    })($('#text'));
    (function(select) {
      select.on('change', function(event) {
        addTranscription(select.val());
        select.val('');
      });
    })($('#snippets'));
    (function(select) {
      select.on('change', function() {
        return setTextFont(select.val());
      });
    })($('#font'));
  };

  toggleListening = function() {
    if ($("#start").prop('disabled') === true) {
      return;
    }
    if (listening) {
      changeStatus(t("Stopping"));
      recognition.stop();
    } else {
      changeStatus(t("Starting"));
      recognition.lang = $('#language').val();
      recognition.start();
    }
  };

  startRecognizer = function() {
    recognition = new webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.onstart = function(event) {
      changeStatus("Stop", true);
      $("#start").addClass('on');
      listening = true;
    };
    recognition.onend = function(event) {
      changeStatus("Start", true);
      $("#start").removeClass('on');
      listening = false;
      $('#interim').text("...");
    };
    recognition.onerror = function(event) {
      console.log(event);
      alert(t("Speech recognition error: {event.error}"));
    };
    recognition.onresult = function(event) {
      var i, interim, result;
      interim = "";
      i = event.resultIndex;
      while (i < event.results.length) {
        result = event.results[i];
        i += 1;
        if (result.isFinal) {
          addTranscription(result[0].transcript);
        } else {
          interim += result[0].transcript;
        }
      }
      $('#interim').text(interim || "...");
    };
    return true;
  };

  Page = (function() {
    function Page() {
      var _this = this;
      this.page = $('#' + this.name + '-page');
      doing("Loading", this.get().then(function(data) {
        return _this.parse(data);
      }));
      $('#menu-' + this.name).on('click', function() {
        return doing("Loading", _this.load().then(function() {
          return _this.open();
        }));
      });
      $('#save-' + this.name).on('click', function() {
        return doing("Saving", _this.save().then(function() {
          return _this.close();
        }));
      });
      $('#reset-' + this.name).on('click', function() {
        return doing("Resetting", _this.reset().then(function() {
          return _this.load();
        }));
      });
    }

    Page.prototype.get = function() {
      var defer,
        _this = this;
      defer = $.Deferred();
      chrome.storage.sync.get(this.name, function(data) {
        var _ref;
        if (chrome.runtime.lastError) {
          defer.reject("Error loading " + _this.name + ": " + chrome.runtime.lastError.message);
          return;
        }
        defer.resolve((_ref = data[_this.name]) != null ? _ref : _this["default"]);
      });
      return defer;
    };

    Page.prototype.set = function(data) {
      var _this = this;
      if (data === this["default"]) {
        return this.reset();
      }
      return this.parse(data).then(function() {
        var defer, err, obj;
        defer = $.Deferred();
        if (typeof (err = typeof _this.validate === "function" ? _this.validate() : void 0) === 'string') {
          return defer.reject("Validation error for " + _this.name + ": " + err);
        }
        obj = {};
        obj[_this.name] = data;
        chrome.storage.sync.set(obj, function() {
          if (chrome.runtime.lastError) {
            defer.reject("Error saving " + _this.name + ": " + chrome.runtime.lastError.message);
            return;
          }
          defer.resolve();
        });
        return defer;
      });
    };

    Page.prototype.open = function() {
      switchToPage(this.name);
    };

    Page.prototype.close = function() {
      switchToPage('main');
    };

    Page.prototype.load = function() {
      return $.Deferred().resolve();
    };

    Page.prototype.save = function() {
      return $.Deferred().resolve();
    };

    Page.prototype.parse = function() {
      return $.Deferred().resolve();
    };

    Page.prototype.reset = function() {
      var defer, parsing,
        _this = this;
      defer = $.Deferred();
      chrome.storage.sync.remove(this.name, function() {
        if (chrome.runtime.lastError) {
          defer.reject("Error removing " + _this.name + ": " + chrome.runtime.lastError.message);
          return;
        }
        defer.resolve();
      });
      parsing = this.parse(this["default"]);
      return defer.then(function() {
        return parsing;
      });
    };

    return Page;

  })();

  SingleTextboxPage = (function(_super) {
    __extends(SingleTextboxPage, _super);

    function SingleTextboxPage() {
      SingleTextboxPage.__super__.constructor.apply(this, arguments);
      this.textarea = $('textarea', this.page);
    }

    SingleTextboxPage.prototype.open = function() {
      SingleTextboxPage.__super__.open.apply(this, arguments);
      this.textarea.focus();
    };

    SingleTextboxPage.prototype.load = function() {
      var _this = this;
      return this.get().done(function(data) {
        _this.textarea.val(data);
      });
    };

    SingleTextboxPage.prototype.save = function() {
      return this.set(this.textarea.val());
    };

    return SingleTextboxPage;

  })(Page);

  LanguagesSelectionPage = (function(_super) {
    __extends(LanguagesSelectionPage, _super);

    LanguagesSelectionPage.prototype.name = 'langs';

    function LanguagesSelectionPage() {
      var _this = this;
      this["default"] = "" + (t("# The first word is the language code, used by the speech recognition engine.")) + "\n" + (t("# The rest of the line is just a label for the language menu list.")) + "\nnl-NL Nederlands\nen-US English";
      createLanguageList('lang', function(code, language) {
        _this.textarea.val("" + code + " " + language + "\n\n" + (_this.textarea.val()));
      });
      LanguagesSelectionPage.__super__.constructor.apply(this, arguments);
    }

    LanguagesSelectionPage.prototype.validate = function() {
      if (this.count() === 0) {
        return t("At least one language must be specified.");
      }
      return null;
    };

    LanguagesSelectionPage.prototype.parse = function(data) {
      var defer, line, mo, ul, _i, _len, _ref;
      defer = $.Deferred();
      ul = $('#language').empty();
      _ref = data.split(/\r*\n+/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (/^\s*(#|$)/.test(line)) {

        } else if (mo = line.match(/^\s*(\S+)\s+(\S.*)$/)) {
          $('<li>').text(mo[2] + " (" + mo[1] + ")").add('<a href="#">' + mo[1] + '</a>').appendTo(ul);
        } else {
          return defer.reject(t("Invalid line:\n {line}"));
        }
      }
      return defer.resolve();
    };

    LanguagesSelectionPage.prototype.count = function() {
      return $('#language > li').length;
    };

    return LanguagesSelectionPage;

  })(SingleTextboxPage);

  PrettifyRulesPage = (function(_super) {
    __extends(PrettifyRulesPage, _super);

    PrettifyRulesPage.prototype.name = 'rules';

    PrettifyRulesPage.prototype.pending = null;

    function PrettifyRulesPage() {
      var _this = this;
      this["default"] = "# Capitalize these words anywhere.\n[ /\\b(google|microsoft|nederlandse|english|nederland|tilburg|wellnessbon|green wellness)\\b/g, capitalize ]\n[ /(free|open|net|dragon)bsd\\b/gi, function(_, a) { return capitalize(a) + 'BSD' } ]\n\n# Capitalize the first letter of each line.\n[ /^\\w/gm, capitalize ]\n\n      # Replace literals with punctuation signs\n      [ /\\komma\\b/gi, ', ' ]\n      [ /\\punt\\b/gi, '. ' ]\n\n# Capitalize the first letter after .?!\n[ /([.?!] )(\\w)/g, function(_, a, b) { return a + capitalize(b) } ]\n\n# Remove whitespace between end of sentence and .?!\n[ /(\\w) ([.?!])/g, function(_, a, b) { return a + b } ]\n\n# Commonly misrecognized words.\n[ /\\big\\b/gi, 'e' ]\n[ /\\buol\\b/gi, 'ou' ]\n      [ /\\welmers\\b/gi, 'wellness' ]\n      [ /\\zijden\\b/gi, 'zij de' ]";
      this.iframe = $.Deferred();
      addEventListener('message', function(event) {
        if (event.data.target === 'prettifyRules') {
          _this.receive(event.data);
        }
      });
      PrettifyRulesPage.__super__.constructor.apply(this, arguments);
    }

    PrettifyRulesPage.prototype.send = function(command, data) {
      var _this = this;
      if (data == null) {
        data = null;
      }
      if (this.pending !== null) {
        return bug("PrettifyRulesPage.pending is set");
      }
      return this.iframe.then(function(iframe) {
        var message;
        _this.pending = $.Deferred().always(function() {
          _this.pending = null;
        });
        message = {
          command: command,
          data: data
        };
        iframe.contentWindow.postMessage(message, '*');
        return _this.pending;
      });
    };

    PrettifyRulesPage.prototype.receive = function(data) {
      switch (data.command) {
        case 'load':
          this.iframe.resolve($('#prettifier')[0]);
          break;
        case 'parse':
          if (data["return"] === null) {
            this.pending.resolve();
          } else {
            this.pending.reject(data["return"]);
          }
          break;
        case 'magic':
          this.pending.resolve(data["return"]);
      }
    };

    PrettifyRulesPage.prototype.parse = function(data) {
      return this.send('parse', data);
    };

    PrettifyRulesPage.prototype.magic = function(text) {
      return this.send('magic', text);
    };

    return PrettifyRulesPage;

  })(SingleTextboxPage);

  SnippetsPage = (function(_super) {
    __extends(SnippetsPage, _super);

    SnippetsPage.prototype.name = 'snippets';

    function SnippetsPage() {
      this["default"] = "?\n!\n.\n,\n:-)\n:-(";
      SnippetsPage.__super__.constructor.apply(this, arguments);
    }

    SnippetsPage.prototype.parse = function(data) {
      var defer, line, ul, _i, _len, _ref;
      defer = $.Deferred();
      ul = $('#snippets').empty();
      $('<li>').add('<a href="#"></a>').appendTo(ul);
      _ref = data.split(/\r*\n+/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (/^\s*(#|$)/.test(line)) {

        } else {
          $('<li>').text(line).add('<a href="#">' + line + '</a>').appendTo(ul);
        }
      }
      return defer.resolve();
    };

    return SnippetsPage;

  })(SingleTextboxPage);

  FontsPage = (function(_super) {
    __extends(FontsPage, _super);

    FontsPage.prototype.name = 'fonts';

    function FontsPage() {
      this["default"] = "# Font name, size:\n      Andale Mono, 20\n      Consolas, 28\nMonospace, 14\nArial, 12\nTrebuchet MS, 14";
      FontsPage.__super__.constructor.apply(this, arguments);
    }

    FontsPage.prototype.parse = function(data) {
      var defer, line, ul, _i, _len, _ref;
      defer = $.Deferred();
      ul = $('#font').empty();
      _ref = data.split(/\r*\n+/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (/^\s*(#|$)/.test(line)) {

        } else {
          $('<li>').text(line).add('<a href="#">' + line + '</a>').appendTo(ul);
        }
      }
      return defer.resolve();
    };

    return FontsPage;

  })(SingleTextboxPage);

  ValueAutoSaver = (function() {
    ValueAutoSaver.prototype.timerId = null;

    function ValueAutoSaver(name, input) {
      var _this = this;
      this.name = name;
      this.input = input;
      this.load();
      this.timeoutHandler = function() {
        return _this.timeout();
      };
      this.input.on('change keyup', function() {
        _this.start();
      });
    }

    ValueAutoSaver.prototype.load = function() {
      var _this = this;
      return readFile(this.name).then(null, function(error, e) {
        if (e.code === e.NOT_FOUND_ERR) {
          return $.Deferred().resolve("");
        }
        return arguments;
      }).done(function(data) {
        _this.input.val(data);
      });
    };

    ValueAutoSaver.prototype.save = function() {
      var _this = this;
      return removeFile(this.name).then(null, function(error, e) {
        if (e.code === e.NOT_FOUND_ERR) {
          return $.Deferred().resolve();
        }
        return arguments;
      }).then(function() {
        var data;
        if ((data = _this.input.val()) === "") {
          return "";
        }
        return writeFile(_this.name, data);
      });
    };

    ValueAutoSaver.prototype.start = function() {
      if (this.timerId !== null) {
        clearTimeout(this.timerId);
      }
      return this.timerId = setTimeout(this.timeoutHandler, 1000);
    };

    ValueAutoSaver.prototype.timeout = (function() {
      var saving;
      saving = null;
      return function() {
        var _this = this;
        this.timerId = null;
        if (saving === null) {
          saving = this.save().always(function() {
            saving = null;
          });
        } else if (saving !== 'scheduled') {
          saving.always(function() {
            _this.save();
          });
          saving = 'scheduled';
        }
      };
    })();

    return ValueAutoSaver;

  })();

  TextAutoSaver = (function(_super) {
    __extends(TextAutoSaver, _super);

    function TextAutoSaver() {
      TextAutoSaver.__super__.constructor.apply(this, arguments);
      this.div = $('#autosave');
    }

    TextAutoSaver.prototype.load = function() {
      return doing("Loading last value", TextAutoSaver.__super__.load.apply(this, arguments));
    };

    TextAutoSaver.prototype.save = function() {
      var _this = this;
      this.div.text('Saving...');
      return TextAutoSaver.__super__.save.apply(this, arguments).done(function() {
        var now;
        now = new Date();
        _this.div.text('Last saved: ' + now.toLocaleTimeString());
      }).fail(function(message) {
        _this.div.text(message);
      });
    };

    TextAutoSaver.prototype.start = function() {
      this.div.text('May contain unsaved work!');
      return TextAutoSaver.__super__.start.apply(this, arguments);
    };

    return TextAutoSaver;

  })(ValueAutoSaver);

  $(function() {
    $('body').on('dragenter', 'textarea', function(event) {
      $(event.target).addClass('dragover');
    });
    $('body').on('dragleave drop', 'textarea', function(event) {
      $(event.target).removeClass('dragover');
    });
    $('body').on('drop', 'textarea', function(event) {
      var data, file, _ref;
      data = event.originalEvent.dataTransfer;
      if (typeof data !== 'object') {
        return;
      }
      if (((_ref = data.files) != null ? _ref.length : void 0) > 0) {
        event.stopPropagation();
        event.preventDefault();
        if (data.files.length > 1) {
          alert("Only one file may be dropped here");
          return;
        }
        file = data.files[0];
        doing("Reading file " + file.name, readFileHandle(file).done(function(data) {
          $(event.target).val(data).triggerHandler('change');
        }));
        return;
      }
    });
  });

}).call(this);
